#
# prepare docker installation
#
#
- name : upgrade to latest packages
  apt: 
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600
  tags:
    - upgrade

- name: Upgrade all apt packages
  apt:
    upgrade: dist
    force_apt_get: yes      
  tags:
    - upgrade

- name: Check if a reboot is needed for Debian and Ubuntu boxes
  register: reboot_required_file
  stat: 
    path: /var/run/reboot-required 
    get_md5: no
  tags:
    - upgrade

- name: Reboot the Debian or Ubuntu server
  reboot:
    msg: "Reboot initiated by Ansible due to kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists
  tags:
    - upgrade

- name: Configure timezone
  timezone:
    name: "{{ timezone }}"
  tags:
    - time

- name: Set ntp server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: "^(#|)NTP="
    line: "NTP={{ ntp }}"
  register: setntp
  tags:
    - time

- name: Disable/Reenable ntp
  shell: "timedatectl set-ntp {{ item }}"
  args:
    executable: /usr/bin/bash
  loop:
    - "off"
    - "on"
  when: setntp.changed
  tags:
    - time

- name: Add an Apt signing key, uses whichever key is at the URL
  apt_key:
    url: "{{ item }}"
    state: present
  with_items:
   - https://packages.cloud.google.com/apt/doc/apt-key.gpg
   - https://download.docker.com/linux/ubuntu/gpg
  tags:
    - repository

- name: Get current ubuntu release
  shell: lsb_release -cs
  args:
    executable: /usr/bin/bash
  register: ubuntu_release

- name: Add docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_release.stdout }} stable"
    state: present
    filename: docker
    
- name: Install necessary packages
  apt:
    pkg:
    - net-tools
    - apt-transport-https
    - curl
    - vim
    - git
    - wget
    - gnupg-agent
    - software-properties-common
    - ca-certificates
    - docker-ce 
    - docker-ce-cli 
    - python3-docker
    - python3-pystemd
    - jq
    state: latest
    update_cache: yes
  tags:
    - packages

- name: Create certs directory
  file:
    path: /etc/docker/certs.d/registry.diehard.net:5000
    state: directory
    mode: 0755
    owner : root
    group: root
  tags:
    - docker

- name: Copy registry certificate
  copy:
    src: '/etc/docker/registry_certs/registry.diehard.net.crt'
    dest: '/etc/docker/certs.d/registry.diehard.net:5000/ca.crt'
    mode: 0640
    owner: root
    group: root
  tags:
    - docker
    - cert

- name: Configure docker for systemd cgroups (1/2)
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0755
    owner: root
    group: root
  tags:
    - docker
 
- name: Configure docker daemon for systemd and overlay (2/2)
  copy:
    src: docker_daemon.json
    dest: /etc/docker/daemon.json
    mode: 0644
    owner: root
    group: root
  tags:
    - docker

- name: Copy nginx configuration update script for new IPs
  copy:
    src: update_nginx_containers_ip.py
    dest: /etc/init.d/update_nginx_containers_ip.py
    mode: 0755
    owner: root
    group: root
  tags:
    - docker
    - service

- name: Copy systemd service unit file
  copy:
    src: update_nginx_containers_ip.service
    dest: /etc/systemd/system/update_nginx_containers_ip.service
    mode: 0644
    owner: root
    group: root
  tags:
    - docker
    - service

- name: Activate systemd service unit file
  systemd:
    state: started
    enabled: yes
    name: update_nginx_containers_ip
    daemon_reload: yes
  tags:
    - docker
    - service
    
- name: "reload systemd"
  systemd:
    name: docker
    enabled: yes
    state: restarted
    daemon_reload: yes
  tags:
    - docker
