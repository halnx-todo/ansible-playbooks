#
# prepare docker installation
#
#
- name : upgrade to latest packages
  apt: 
    update_cache: yes
    force_apt_get: yes
    cache_valid_time: 3600
  tags:
    - upgrade

- name: Upgrade all apt packages
  apt:
    upgrade: dist
    force_apt_get: yes      
  tags:
    - upgrade

- name: Check if a reboot is needed for Debian and Ubuntu boxes
  register: reboot_required_file
  stat: 
    path: /var/run/reboot-required 
    get_checksum: no
  tags:
    - upgrade

- name: Reboot the Debian or Ubuntu server
  reboot:
    msg: "Reboot initiated by Ansible due to kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists
  tags:
    - upgrade

- name: Configure timezone
  timezone:
    name: "{{ timezone }}"
  tags:
    - time

- name: Set ntp server
  lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: "^(#|)NTP="
    line: "NTP={{ ntp }}"
  register: setntp
  tags:
    - time

- name: Disable/Reenable ntp
  shell: "timedatectl set-ntp {{ item }}"
  args:
    executable: /usr/bin/bash
  loop:
    - "off"
    - "on"
  when: setntp.changed
  tags:
    - time

- name: Create apt keyrings directory if needed
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: 0755
    owner: root
    group: root
  tags:
    - repository

- name: Add docker repository signing key
  get_url:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    dest: /etc/apt/keyrings/docker.asc
    mode: 0644
    force: true
  tags:
    - repository

- name: Add docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  tags:
    - repository 

- name: Install necessary packages
  apt:
    pkg:
    - net-tools
    - apt-transport-https
    - curl
    - vim
    - git
    - wget
    - gnupg-agent
    - software-properties-common
    - ca-certificates
    - docker-ce 
    - docker-ce-cli 
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
    - python3-docker
    - python3-pystemd
    - jq
    state: latest
    update_cache: yes
  tags:
    - packages

- name: Determine available groups
  getent:
    database: group

- name: Add additional groups to user
  user: name="ansible" groups="{{item}}" append=yes
  when: item in ansible_facts.getent_group
  with_items: 
      - docker

- name: Create certs directory
  file:
    path: /etc/docker/certs.d/registry.diehard.net:5000
    state: directory
    mode: 0755
    owner : root
    group: root
  tags:
    - docker

- name: check for registry certificate
  stat:
    path: '/etc/docker/registry_certs/registry.diehard.net.crt'
  register: local_registry_diehard_net_crt
  tags: 
   - docker
   - cert

- name: Copy registry certificate
  copy:
    src: '/etc/docker/registry_certs/registry.diehard.net.crt'
    dest: '/etc/docker/certs.d/registry.diehard.net:5000/ca.crt'
    mode: 0640
    owner: root
    group: root
  when: local_registry_diehard_net_crt.stat.exists and local_registry_diehard_net_crt.stat.isreg
  tags:
    - docker
    - cert

- name: Configure docker for systemd cgroups (1/2)
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0755
    owner: root
    group: root
  tags:
    - docker
 
- name: Configure docker daemon for systemd and overlay (2/2)
  template:
    src: docker_daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: 0644
    owner: root
    group: root
  tags:
    - docker
    
- name: "reload systemd"
  systemd:
    name: docker
    enabled: yes
    state: restarted
    daemon_reload: yes
  tags:
    - docker
