#
# OpenSSL configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME      = .
RANDFILE    = $ENV::HOME/.rnd

####################################################################
[ ca ]
default_ca  = CA_default    # The default ca section

####################################################################
[ CA_default ]

dir   = {{ data_dir }}/ssl # Where everything is kept
certs   = {{ data_dir }}/ssl/{{ domain_file }}      # Where the issued certs are kept
crl_dir   = $dir      # Where the issued crl are kept
database  = $dir/index.txt  # database index file.
new_certs_dir = {{ data_dir }}/ssl/{{ domain_file }}  # default place for new certs.

certificate = $dir/ca.crt   # The CA certificate
serial    = $dir/serial     # The current serial number
crl   = $dir/crl.pem    # The current CRL
private_key = $dir/ca.key # The private key
RANDFILE  = $dir/.rand    # private random number file

x509_extensions = basic_exts    # The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt  = ca_default    # Subject Name options
cert_opt  = ca_default    # Certificate field options

# This allows a V2 CRL. Ancient browsers don't like it, but anything Easy-RSA
# is designed for will. In return, we get the Issuer attached to CRLs.
crl_extensions  = crl_ext

default_days  = 730     # how long to certify for
default_crl_days= 730     # how long before next CRL
default_md  = sha256    # use public key default MD
preserve  = no      # keep passed DN ordering

policy    = policy_match

# For the CA policy
[ policy_match ]
commonName    = supplied
stateOrProvinceName = match
countryName   = match
organizationName  = match
organizationalUnitName  = optional
emailAddress    = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName   = optional
stateOrProvinceName = optional
localityName    = optional
organizationName  = optional
organizationalUnitName  = optional
commonName    = supplied
emailAddress    = optional

####################################################################
# Request handling
# We key off $DN_MODE to determine how to format the DN
[ req ]
default_bits    = 2048
default_keyfile   = privkey.pem
default_md    = sha256
distinguished_name  = req_distinguished_name
attributes    = req_attributes
x509_extensions   = v3_ca  # The extentions to add to the self signed cert
req_extensions = v3_req

[ req_distinguished_name ]
countryName     = Country Name (2 letter code)
countryName_default   = FR
countryName_min     = 2
countryName_max     = 2

stateOrProvinceName   = State or Province Name (full name)
stateOrProvinceName_default = IDF

localityName      = Locality Name (eg, city)
localityName_default = PARIS

0.organizationName    = Organization Name (eg, company)
0.organizationName_default  = MyCompany

# we can do this but it is not needed normally :-)
#1.organizationName   = Second Organization Name (eg, company)
#1.organizationName_default = World Wide Web Pty Ltd

organizationalUnitName    = Organizational Unit Name (eg, section)
organizationalUnitName_default = MyCompany

commonName      = Common Name (e.g. server FQDN or YOUR name)
commonName_max      = 64
commonName_default  = $ENV::DOMAIN

emailAddress      = Email Address
emailAddress_max    = 64
{% if E is defined and E != '' %}emailAddress_default = {{ E }}{% endif %}

# SET-ex3     = SET extension number 3

[ req_attributes ]
challengePassword   = A challenge password
challengePassword_min   = 4
challengePassword_max   = 20

unstructuredName    = An optional company name

####################################################################
# cert extension handling

# This section is effectively unused as the main script sets extensions
# dynamically. This core section is left to support the odd usecase where
# a user calls openssl directly.

[ usr_cert ]
authorityInfoAccess = OCSP;URI:http://ocsp.domain
crlDistributionPoints = URI:http://admin.domain/domain.crl

basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
extendedKeyUsage = serverAuth,clientAuth
keyUsage = nonRepudiation,digitalSignature,keyEncipherment

[ v3_req ]
# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName    = @alt_names

[ alt_names ]
DNS.1 = $ENV::DOMAIN
{% for altname in altnames.split(',') %}DNS.{{ loop.index+1 }} = {{ altname }}
{% endfor %}
{% for altnameiip in altnameips %}IP.{{ loop.index }} = {{ altnameip }}
{% endfor %}
# This sets a mask for permitted string types. There are several options.
# default: PrintableString, T61String, BMPString.
# pkix   : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.

[ v3_ca ]
basicConstraints = CA:TRUE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
keyUsage = cRLSign,keyCertSign,nonRepudiation,digitalSignature,keyEncipherment
#extendedKeyUsage = OCSPSigning
subjectAltName    = @alt_names

[ crl_ext ]
# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.
# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always
